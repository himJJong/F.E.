let. var

null - 값이 없음, undefined - 값이 설정 되지 않음

=== 두 값이 일치하는지 확인
!== 두 값이 일치하지 않는지 확인

// 한줄 주석, /* */ 여러줄 주석

let 과 const 를 배울 때, 다른 블록 범위에서는 똑같은 이름으로 선언 할 수도 있다

객체 안에 함수를 넣을 때, 화살표 함수로 선언한다면 제대로 작동하지 않습니다.
이유는, function 으로 선언한 함수는 this 가 제대로 자신이 속한 객체를 가르키게 되는데, 화살표 함수는 그렇지 않기 때문입니다.

Getter 함수는 특정 값을 조회 할 때 우리가 설정한 함수로 연산된 값을 반환합니다


const doggy = {
  name: '멍멍이',
  sound: '멍멍',
  age: 2
};

console.log(Object.entries(doggy));
console.log(Object.keys(doggy));
console.log(Object.values(doggy));

콜백 함수란, 함수 타입의 값을 파라미터로 넘겨줘서, 파라미터로 받은 함수를 특정 작업이 끝나고 호출을 해주는 것을 의미
함수에 파라미터로 들어가는 함수, 용도로는 순차적으로 실행하고 싶을 때 사용

< 비동기적으로 처리하게 되는 작업 예시 >

Ajax Web API 요청: 만약 서버쪽에서 데이터를 받와아야 할 때는, 요청을 하고 서버에서 응답을 할 때 까지 대기를 해야 되기 때문에 작업을 비동기적으로 처리합니다.

파일 읽기: 주로 서버 쪽에서 파일을 읽어야 하는 상황에는 비동기적으로 처리합니다.
암호화/복호화: 암호화/복호화를 할 때에도 바로 처리가 되지 않고, 시간이 어느정도 걸리는 경우가 있기 때문에 비동기적으로 처리합니다.
작업 예약: 단순히 어떤 작업을 몇초 후에 스케쥴링 해야 하는 상황에는, setTimeout 을 사용하여 비동기적으로 처리합니다.

 작업이 진행되는 동안 다른 작업도 하고 싶다면 함수를 비동기 형태로 전환을 해주어야하는데요, 그렇게 하기 위해서는 setTimeout 이라는 함수를 사용
 
ES6 - promise, ES8 - async/await
async 함수에서 에러를 발생 시킬때에는 throw 를 사용하고, 에러를 잡아낼 때에는 try/catch 문을 사용

보통 인터랙션이 많은 경우에는 Vanilla JavaScript (별도의 라이브러리/프레임워크를 사용하지 않는 형태) 를 사용해서 하기에는 코드의 양도 많아지고 코드 관리도 어려운 편이라 
보통 React, Vue, Angular 등의 도구를 사용

<AJAX>

AJAX는 비동기적 웹 서비스를 개발할 때 사용하는 기법. 페이지의 이동 없이 서버에 요청/응답을 받는 기술이다. AJAX 요청은 jQuery나 axios 같은 라이브러리를 주로 사용한다. 원래 브라우저에서 XMLHttpRequest 객체를 제공하나 복잡하고 서버에서 사용할 수 없어서 앞선 방법을 사용

FormData는 주로 AJAX와 함께 form 태그의 데이터를 동적으로 제어할 수 있는 기능

=============================================================================================

<JavaScript와 TypeScript>

- TypeScript는 JavaScript 기반의 언어
- JavaScript는 클라이언트 측 스크립팅 언어 TypeScript는 객체 지향 컴파일 언어
- 객체 지향 프로그래밍 패러다임은 데이터 추상화에 중심
  : 객체와 클래스라는 두 주요 개념을 기반으로 함

JavaScript

-웹 개발에 주로 사용됨
-웹 페이지를 대화식으로 만드는 프로그래밍 언어
-폼 유효성 검사, 애니메이션 적용 및 이벤트 생성을 수행
-클라이언트 측 스크립팅 언어
   : 사용자가 웹 브라우저를 열고 웹 페이지를 요청하면 해당 요청이 웹 서버로 이동함
-멀티 스레딩, 멀티 프로세싱 기능이 없음

TypeScript

JavaScript의 상위 집합으로 JavaScript의 모든 기능이 있음
TypeScript 컴파일러를 사용하여 ts(TypeScript)파일을 js(JavaScript) 파일로 변환, 쉽게 통합
정적 유형 검사 제공
클래스 기반 객체를 만들 수 있음
클래스 기반이므로 객체 지향 프로그래밍 언어로 상속, 캡슐화 및 생성자를 지원할 수 있음

